// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaceTraders.Repositories.DatabaseRepositories.DbContexts;

#nullable disable

namespace SpaceTraders.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20240524105446_Fix foreign keys")]
    partial class Fixforeignkeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Headquarters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartingFaction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("WaypointId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WaypointSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WaypointId")
                        .IsUnique();

                    b.ToTable("Chart");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeadlineToAccept")
                        .HasColumnType("TEXT");

                    b.Property<string>("FactionSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Fulfilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractDeliverGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractTermsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DestinationSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TradeSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitsFulfilled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitsRequired")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContractTermsId");

                    b.ToTable("ContractDeliverGood");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractTermsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnFulfilled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContractTermsId")
                        .IsUnique();

                    b.ToTable("ContractPayment");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractTerms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("ContractTerms");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Cooldown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<int>("RemainingSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShipSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSeconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("Cooldown");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Headquarters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecruiting")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.FactionTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FactionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.ToTable("FactionTrait");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.MarketTradeGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Activity")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchasePrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SellPrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Supply")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TradeVolume")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("MarketTradeGood");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.MarketTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PricePerUnit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShipSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TradeSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WaypointSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("MarketTransaction");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipCargo");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCargoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipCargoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Units")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipCargoId");

                    b.ToTable("ShipCargoItem");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCrew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Current")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Morale")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rotation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wages")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipCrew");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipEngine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Condition")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Integrity")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipEngineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequirementsId");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipEngine");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Condition")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FuelCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Integrity")
                        .HasColumnType("REAL");

                    b.Property<int>("ModuleSlots")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MountingPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequirementsId");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipFrame");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Current")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipFuel");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuelConsumed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipFuelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShipFuelId")
                        .IsUnique();

                    b.ToTable("ShipFuelConsumed");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequirementsId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipModule");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipMount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Deposits")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipMountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequirementsId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipMount");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNav", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FlightMode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WaypointSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipNav");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNavRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OriginId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipNavId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ShipNavId")
                        .IsUnique();

                    b.ToTable("ShipNavRoute");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNavRouteWaypoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ShipNavRouteWaypoint");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipReactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Condition")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Integrity")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PowerOutput")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipReactorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequirementsId");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipReactor");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FactionSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("ShipRegistration");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Crew")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Slots")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ShipRequirements");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.TradeGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExchangeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExportId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("ExportId");

                    b.HasIndex("ImportId");

                    b.ToTable("TradeGood");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Waypoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnderConstruction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Orbits")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Waypoints");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointFaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WaypointId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WaypointId")
                        .IsUnique();

                    b.ToTable("WaypointFaction");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WaypointId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WaypointId");

                    b.ToTable("WaypointModifier");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointOrbital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WaypointId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WaypointId");

                    b.ToTable("WaypointOrbital");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WaypointId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WaypointId");

                    b.ToTable("WaypointTrait");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Chart", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Waypoint", null)
                        .WithOne("Chart")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Chart", "WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractDeliverGood", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractTerms", null)
                        .WithMany("Deliver")
                        .HasForeignKey("ContractTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractPayment", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractTerms", null)
                        .WithOne("Payment")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractPayment", "ContractTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractTerms", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Contract", null)
                        .WithOne("Terms")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractTerms", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Cooldown", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Cooldown")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Cooldown", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.FactionTrait", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Faction", null)
                        .WithMany("Traits")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.MarketTradeGood", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Market", null)
                        .WithMany("TradeGoods")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.MarketTransaction", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Market", null)
                        .WithMany("Transactions")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCargo", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Cargo")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCargo", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCargoItem", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCargo", null)
                        .WithMany("Inventory")
                        .HasForeignKey("ShipCargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCrew", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Crew")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCrew", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipEngine", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRequirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Engine")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipEngine", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFrame", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRequirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Frame")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFrame", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuel", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Fuel")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuel", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuelConsumed", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuel", null)
                        .WithOne("Consumed")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuelConsumed", "ShipFuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipModule", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRequirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithMany("Modules")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipMount", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRequirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithMany("Mounts")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNav", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Nav")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNav", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNavRoute", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNavRouteWaypoint", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNavRouteWaypoint", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNav", null)
                        .WithOne("Route")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNavRoute", "ShipNavId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipReactor", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRequirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Reactor")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipReactor", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRegistration", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", null)
                        .WithOne("Registration")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipRegistration", "ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.TradeGood", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Market", null)
                        .WithMany("Exchange")
                        .HasForeignKey("ExchangeId");

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Market", null)
                        .WithMany("Exports")
                        .HasForeignKey("ExportId");

                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Market", null)
                        .WithMany("Imports")
                        .HasForeignKey("ImportId");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointFaction", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Waypoint", null)
                        .WithOne("Faction")
                        .HasForeignKey("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointFaction", "WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointModifier", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Waypoint", null)
                        .WithMany("Modifiers")
                        .HasForeignKey("WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointOrbital", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Waypoint", null)
                        .WithMany("Orbitals")
                        .HasForeignKey("WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.WaypointTrait", b =>
                {
                    b.HasOne("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Waypoint", null)
                        .WithMany("Traits")
                        .HasForeignKey("WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Contract", b =>
                {
                    b.Navigation("Terms")
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ContractTerms", b =>
                {
                    b.Navigation("Deliver");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Faction", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Market", b =>
                {
                    b.Navigation("Exchange");

                    b.Navigation("Exports");

                    b.Navigation("Imports");

                    b.Navigation("TradeGoods");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Ship", b =>
                {
                    b.Navigation("Cargo")
                        .IsRequired();

                    b.Navigation("Cooldown")
                        .IsRequired();

                    b.Navigation("Crew")
                        .IsRequired();

                    b.Navigation("Engine")
                        .IsRequired();

                    b.Navigation("Frame")
                        .IsRequired();

                    b.Navigation("Fuel")
                        .IsRequired();

                    b.Navigation("Modules");

                    b.Navigation("Mounts");

                    b.Navigation("Nav")
                        .IsRequired();

                    b.Navigation("Reactor")
                        .IsRequired();

                    b.Navigation("Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipCargo", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipFuel", b =>
                {
                    b.Navigation("Consumed");
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.ShipNav", b =>
                {
                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("SpaceTraders.Repositories.DatabaseRepositories.DbModels.Waypoint", b =>
                {
                    b.Navigation("Chart")
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Modifiers");

                    b.Navigation("Orbitals");

                    b.Navigation("Traits");
                });
#pragma warning restore 612, 618
        }
    }
}
